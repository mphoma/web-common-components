export type CardProps = {
    id?: string  ,
    automationId?: string,
    width?: string  ,
    height?: string  ,
    flex?: string  ,
    padding?: string  ,
    margin?: string  ,
    minWidth?: string  ,
    maxHeight?: string  ,
    maxWidth?: string  ,
    minHeight?: string  ,
    isEnabled?: any  ,
    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void,
    ref?: any ,
    backgroundColor?: string  ,
    display?: string  ,
    focusBoxShadow?: string  ,
    borderRadius?: string  ,
    focusColor?: string  ,
    activeBoxShadow?: string  ,
    justifyContent?: string  ,
    containerHeight?: string  ,
    containerWidth?: string  ,
    boxShadow?: string  ,
    flexDirection?: string  ,
    alignItems?: string  ,
    overflow?: string  ,
    hoverBorder?: string  ,
    hoverBoxShadow?: string  ,
    hoverColor?: string  ,
    focusBorder?: string  ,
    activeOpacity?: string  ,
    children?: React.ReactNode
    color?: string  ,
    border?: string  ,
    cardDisplay?: string  ,
    backgroundImageUrl?: string  ,
    boxSizing?: string  ,
    iconUrl?: string  ,
    iconWidth?: string  ,
    iconHeight?: string  ,
    headingAlign?: string  ,
    headingSize?: any  ,
    headingWeight?: string  ,
    heading?: string  ,
    bodyAlign?: string  ,
    bodySize?: string  ,
    body?: string  ,
    textAlign?: string  ,
    cardMargin?: string  ,
    cardPadding?: any  ,
    flexGrow?: string  ,
    cardWidth?: string  ,
    subtitleMargin?: string  ,
    titleMargin?: string  ,
    titleWeight?: string  ,
    titleSize?: string  ,
    textMargin?: string  
    buttonAutomationId?: string  ,
    activeBackgroundColor?: string  ,
    activeColor?: string  ,
    activeBorderColor?: string  ,
    buttonHeight?: string  ,
    buttonMinWidth?: any  ,
    buttonMargin?: string  ,
    buttonBorder?: string  ,
    buttonActiveOpacity?: string  ,
    buttonFontSize?: string  ,
    buttonFontWeight?: string  ,
    buttonFontFamily?: string  ,
    buttonText?: string  
    buttonId?: string  ,
    text?: string  ,
    isTextHTML?: string  ,
    __html?: string,
    title?: string  ,
    subtitle?: any  ,
    imageObjectFit?: string  ,
    imageHeight?: string  ,
    imageWidth?: string  ,
    image?: string  ,
    alt?: any  ,
    showSeperator?: boolean,
    onSecondaryClick?: (event: React.MouseEvent<HTMLDivElement>) => void,
    secondaryText?: string,
    onPrimaryClick?: (event: React.MouseEvent<HTMLDivElement>) => void,
    primaryText?: string
    autoFocus?: string,
    fontSize?: string  ,
    fontWeight?: string  ,
    fontFamily?: string  ,
    tabIndex?: string  ,
    role?: string  ,
    onFocus?: boolean   ,
    onBlur?: boolean,
    name?: string  ,
    onClickArgs?: (event: React.MouseEvent<HTMLDivElement>) => void,
}